import { useState } from "react";
import { motion } from "framer-motion";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useScrollAnimation } from "@/hooks/useAnimations";
import GlassCard from "@/components/common/GlassCard";
import NeumorphButton from "@/components/common/NeumorphButton";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { apiRequest } from "@/lib/queryClient";
import { validateDomain, validateIPAddress, exportToJSON, exportToCSV } from "@/utils/networkUtils";
import { Download, Shield, AlertTriangle, CheckCircle, XCircle, Zap } from "lucide-react";

const vulnerabilitySchema = z.object({
  target: z.string().min(1, "Target is required").refine(
    (val) => validateDomain(val) || validateIPAddress(val),
    "Please enter a valid domain name or IP address"
  ),
  scanPorts: z.boolean().default(true),
  scanSSL: z.boolean().default(true),
  scanHeaders: z.boolean().default(true),
  scanWebApps: z.boolean().default(false),
  aggressive: z.boolean().default(false),
});

type VulnerabilityFormData = z.infer<typeof vulnerabilitySchema>;

interface Vulnerability {
  id: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  solution: string;
  cve?: string;
  port?: number;
  service?: string;
}

interface VulnerabilityResult {
  target: string;
  scanTime: number;
  vulnerabilities: Vulnerability[];
  summary: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  ports: {
    total: number;
    open: number;
    filtered: number;
  };
}

const VulnerabilityScanner = () => {
  const [results, setResults] = useState<VulnerabilityResult | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [currentPhase, setCurrentPhase] = useState<string>("");
  const [error, setError] = useState<string | null>(null);
  
  const scrollAnimation = useScrollAnimation();

  const form = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: {
      target: "",
      scanPorts: true,
      scanSSL: true,
      scanHeaders: true,
      scanWebApps: false,
      aggressive: false,
    },
  });

  const onSubmit = async (data: VulnerabilityFormData) => {
    setResults(null);
    setError(null);
    setIsScanning(true);
    setScanProgress(0);

    // Simulate scan phases with progress
    const phases = [
      { name: "Port Discovery", duration: 2000 },
      { name: "Service Detection", duration: 3000 },
      { name: "SSL Analysis", duration: 2000 },
      { name: "Header Analysis", duration: 1500 },
      { name: "Vulnerability Assessment", duration: 4000 },
    ];

    try {
      let totalProgress = 0;
      const progressIncrement = 100 / phases.length;

      for (const phase of phases) {
        setCurrentPhase(`Scanning: ${phase.name}`);
        
        const startProgress = totalProgress;
        const endProgress = totalProgress + progressIncrement;
        const steps = 20;
        const stepDuration = phase.duration / steps;

        for (let i = 0; i <= steps; i++) {
          const currentProgress = startProgress + (endProgress - startProgress) * (i / steps);
          setScanProgress(currentProgress);
          await new Promise(resolve => setTimeout(resolve, stepDuration));
        }

        totalProgress = endProgress;
      }

      setCurrentPhase("Generating Report");
      const response = await apiRequest("POST", "/api/tools/vulnerability-scan", data);
      const result = await response.json();
      setResults(result.results);
    } catch (err: any) {
      setError(err.message || "Vulnerability scan failed");
    } finally {
      setIsScanning(false);
      setScanProgress(0);
      setCurrentPhase("");
    }
  };

  const exportResults = (format: 'json' | 'csv') => {
    if (!results) return;
    
    if (format === 'json') {
      exportToJSON(results, 'vulnerability-scan-results');
    } else {
      exportToCSV(results.vulnerabilities, 'vulnerability-scan-results');
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-400/20';
      case 'high': return 'text-orange-500 bg-orange-500/20';
      case 'medium': return 'text-yellow-500 bg-yellow-500/20';
      case 'low': return 'text-blue-400 bg-blue-400/20';
      default: return 'text-gray-500 bg-gray-500/20';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high': return XCircle;
      case 'medium': return AlertTriangle;
      case 'low': return CheckCircle;
      default: return CheckCircle;
    }
  };

  return (
    <motion.div
      ref={scrollAnimation.ref}
      variants={scrollAnimation.variants}
      transition={scrollAnimation.transition}
      className="space-y-6"
    >
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Configuration Panel */}
        <GlassCard className="p-6">
          <h3 className="text-lg font-semibold mb-4 gradient-text">
            <Shield className="w-5 h-5 inline mr-2" />
            Vulnerability Scan Configuration
          </h3>
          
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <Label htmlFor="target" className="text-sm font-medium mb-2 block">
                Target Host
              </Label>
              <Input
                id="target"
                placeholder="example.com or 192.168.1.1"
                {...form.register("target")}
                className="form-input"
                data-testid="input-target"
              />
              {form.formState.errors.target && (
                <p className="text-red-400 text-xs mt-1">
                  {form.formState.errors.target.message}
                </p>
              )}
            </div>

            <div>
              <Label className="text-sm font-medium mb-3 block">Scan Options</Label>
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="scanPorts"
                    checked={form.watch("scanPorts")}
                    onCheckedChange={(checked) => form.setValue("scanPorts", !!checked)}
                    data-testid="checkbox-ports"
                  />
                  <Label htmlFor="scanPorts" className="text-sm">
                    Port Vulnerability Scan
                  </Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="scanSSL"
                    checked={form.watch("scanSSL")}
                    onCheckedChange={(checked) => form.setValue("scanSSL", !!checked)}
                    data-testid="checkbox-ssl"
                  />
                  <Label htmlFor="scanSSL" className="text-sm">
                    SSL/TLS Security Check
                  </Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="scanHeaders"
                    checked={form.watch("scanHeaders")}
                    onCheckedChange={(checked) => form.setValue("scanHeaders", !!checked)}
                    data-testid="checkbox-headers"
                  />
                  <Label htmlFor="scanHeaders" className="text-sm">
                    HTTP Security Headers
                  </Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="scanWebApps"
                    checked={form.watch("scanWebApps")}
                    onCheckedChange={(checked) => form.setValue("scanWebApps", !!checked)}
                    data-testid="checkbox-webapps"
                  />
                  <Label htmlFor="scanWebApps" className="text-sm">
                    Web Application Vulnerabilities
                  </Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="aggressive"
                    checked={form.watch("aggressive")}
                    onCheckedChange={(checked) => form.setValue("aggressive", !!checked)}
                    data-testid="checkbox-aggressive"
                  />
                  <Label htmlFor="aggressive" className="text-sm">
                    Aggressive Scan (Slower but thorough)
                  </Label>
                </div>
              </div>
            </div>

            <NeumorphButton
              type="submit"
              variant="error"
              size="lg"
              loading={isScanning}
              disabled={isScanning}
              className="w-full"
            >
              {isScanning ? (
                <>
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                    className="mr-2"
                  >
                    <Zap className="w-5 h-5" />
                  </motion.div>
                  Scanning...
                </>
              ) : (
                <>
                  <Shield className="w-5 h-5 mr-2" />
                  Start Vulnerability Scan
                </>
              )}
            </NeumorphButton>
          </form>

          {/* Progress Display */}
          {isScanning && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-6 space-y-3"
              data-testid="scan-progress"
            >
              <Progress value={scanProgress} className="w-full h-2" />
              <div className="text-sm text-muted-foreground text-center">
                {currentPhase} ({Math.round(scanProgress)}%)
              </div>
            </motion.div>
          )}
        </GlassCard>

        {/* Results Panel */}
        <GlassCard className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold gradient-text">Vulnerability Report</h3>
            {results && (
              <div className="flex space-x-2">
                <Button
                  onClick={() => exportResults('json')}
                  size="sm"
                  variant="ghost"
                  className="text-cyber-blue hover:text-cyber-blue/80"
                  data-testid="export-json"
                >
                  <Download className="w-4 h-4 mr-1" />
                  JSON
                </Button>
                <Button
                  onClick={() => exportResults('csv')}
                  size="sm"
                  variant="ghost"
                  className="text-cyber-blue hover:text-cyber-blue/80"
                  data-testid="export-csv"
                >
                  <Download className="w-4 h-4 mr-1" />
                  CSV
                </Button>
              </div>
            )}
          </div>

          <div className="space-y-4 min-h-[500px]">
            {isScanning ? (
              <div className="flex items-center justify-center h-full">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                  className="text-red-400"
                >
                  <Shield className="w-8 h-8" />
                </motion.div>
                <span className="ml-3 text-muted-foreground">
                  {currentPhase || "Initializing scan..."}
                </span>
              </div>
            ) : results ? (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-4"
                data-testid="vulnerability-results"
              >
                {/* Scan Summary */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="p-4 bg-red-500/10 rounded-lg border border-red-500/30">
                    <h4 className="font-semibold mb-3 text-red-400">Security Summary</h4>
                    <div className="grid grid-cols-2 gap-2 text-xs">
                      <div className="text-center p-2 bg-red-400/20 rounded">
                        <div className="text-lg font-bold">{results.summary.critical}</div>
                        <div className="text-red-400">Critical</div>
                      </div>
                      <div className="text-center p-2 bg-orange-500/20 rounded">
                        <div className="text-lg font-bold">{results.summary.high}</div>
                        <div className="text-orange-500">High</div>
                      </div>
                      <div className="text-center p-2 bg-yellow-500/20 rounded">
                        <div className="text-lg font-bold">{results.summary.medium}</div>
                        <div className="text-yellow-500">Medium</div>
                      </div>
                      <div className="text-center p-2 bg-blue-400/20 rounded">
                        <div className="text-lg font-bold">{results.summary.low}</div>
                        <div className="text-blue-400">Low</div>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-gray-800/30 rounded-lg">
                    <h4 className="font-semibold mb-3 text-cyber-blue">Scan Details</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Target:</span>
                        <span className="font-mono">{results.target}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Scan Time:</span>
                        <span>{results.scanTime}s</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Open Ports:</span>
                        <span>{results.ports.open}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Total Issues:</span>
                        <span>{results.summary.total}</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Vulnerability List */}
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  <h4 className="font-semibold text-electric-purple">Detected Vulnerabilities</h4>
                  {results.vulnerabilities.length > 0 ? (
                    results.vulnerabilities.map((vuln, index) => {
                      const SeverityIcon = getSeverityIcon(vuln.severity);
                      
                      return (
                        <motion.div
                          key={vuln.id}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className="p-4 bg-gray-800/30 rounded-lg border border-gray-600"
                          data-testid={`vulnerability-${vuln.id}`}
                        >
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex items-center space-x-2">
                              <SeverityIcon className={`w-4 h-4 ${getSeverityColor(vuln.severity).split(' ')[0]}`} />
                              <h5 className="font-semibold">{vuln.title}</h5>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Badge className={getSeverityColor(vuln.severity)}>
                                {vuln.severity.toUpperCase()}
                              </Badge>
                              {vuln.cve && (
                                <Badge variant="secondary" className="text-xs">
                                  {vuln.cve}
                                </Badge>
                              )}
                            </div>
                          </div>
                          
                          <p className="text-sm text-muted-foreground mb-3">
                            {vuln.description}
                          </p>
                          
                          <div className="text-xs space-y-1">
                            {vuln.port && (
                              <div className="flex items-center space-x-2">
                                <span className="text-muted-foreground">Port:</span>
                                <span className="font-mono">{vuln.port}</span>
                                {vuln.service && (
                                  <>
                                    <span className="text-muted-foreground">Service:</span>
                                    <span>{vuln.service}</span>
                                  </>
                                )}
                              </div>
                            )}
                            <div>
                              <span className="text-muted-foreground">Solution:</span>
                              <span className="ml-2">{vuln.solution}</span>
                            </div>
                          </div>
                        </motion.div>
                      );
                    })
                  ) : (
                    <div className="text-center py-8 text-neon-green">
                      <CheckCircle className="w-12 h-12 mx-auto mb-3" />
                      <p>No vulnerabilities detected! Your target appears secure.</p>
                    </div>
                  )}
                </div>
              </motion.div>
            ) : error ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                className="p-4 bg-red-500/10 border border-red-500/30 rounded-lg text-red-400"
              >
                <div className="flex items-center mb-2">
                  <XCircle className="w-4 h-4 mr-2" />
                  <span className="font-medium">Scan Failed</span>
                </div>
                <p className="text-sm">{error}</p>
              </motion.div>
            ) : (
              <div className="flex items-center justify-center h-full text-muted-foreground">
                <div className="text-center">
                  <Shield className="w-12 h-12 mx-auto mb-3 opacity-50" />
                  <p>Configure scan options and click "Start Vulnerability Scan"</p>
                </div>
              </div>
            )}
          </div>
        </GlassCard>
      </div>
    </motion.div>
  );
};

export default VulnerabilityScanner;
